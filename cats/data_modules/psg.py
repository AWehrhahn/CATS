"""
Load spectra from Planetary Spectrum Generator (PSG)
"""
import glob
import shutil
import os
from os.path import basename, exists, join, splitext, dirname
import re

from copy import deepcopy

import numpy as np
import pandas as pd
from astropy import units as u
from astropy.constants import G
from astropy.time import Time

from data_sources.PSG import PSG

from .datasource import DataSource
from ..spectrum import Spectrum1D, SpectrumList


class Psg(DataSource):
    def __init__(self, star, planet):
        super().__init__("psg")

        self.star = star
        self.planet = planet
        self.dir = self.config["dir"].format(star=star.name, planet=planet.name)

        # TODO change psg config, to reflect orbital parameters

    @property
    def file_atm(self):
        return join(self.dir, self.config["file_atm"])

    @property
    def file_obs(self):
        return join(self.dir, self.config["file_obs"])

    @property
    def file_phase(self):
        return join(self.dir, self.config["file_phase"])

    @property
    def file_flux(self):
        return join(self.dir, self.config["file_star"])

    @property
    def file_tell(self):
        return join(self.dir, self.config["file_tell"])

    @property
    def file_config(self):
        return join(self.dir, self.config["file_config"])

    def get_planet(self, wrange, time):
        """ load planetary transmission spectrum

        Parameters:
        ----------
        ** data: object
            previous data results

        Returns
        -------
        planet : dataset
            planetary transmission spectrum
        """
        wave, planet = [], []
        for wmin, wmax in wrange.subregions:
            wmin, wmax = wmin.to_value(u.AA), wmax.to_value(u.AA)

            if not exists(self.file_atm) or not self.check_wavelength_range(
                self.file_atm, (wmin, wmax)
            ):
                self.prepare_config_file(self.star, self.planet)
                self.load_psg(None, wmin, wmax, planet=True)

            data = pd.read_csv(self.file_atm)
            wave += [data["Wave/freq"].values << u.AA]
            planet += [data["Total"].values << u.one]

        spectra = SpectrumList(
            flux=planet,
            spectral_axis=wave,
            source="Planet Spectrum Generator",
            description="Model Planet Transmission spectrum",
            reference_frame="planet",
            datetime=time,
            star=self.star,
            planet=self.planet,
        )

        return spectra

    def get_observations(self, **data):
        """ load observations created by PSG

        Parameters:
        ----------
        Returns
        -------
        obs : dataset
            observations
        """

        """ load observations """
        obs_file = self.file_obs
        phase_file = self.file_phase
        phase = pd.read_table(phase_file, delim_whitespace=True, index_col="filename")

        # Find all suitable files
        files = glob.glob(obs_file)

        obs_all = []
        wl_all = []
        phase_all = []

        for f in files:
            obs = pd.read_csv(f)

            wl = obs["Wave/freq"].values
            obs = obs["Total"].values

            wl_all.append(wl)
            obs_all.append(obs)

            bn = basename(f)
            bn = splitext(bn)[0]

            phase_all.append(phase.loc[bn]["phase"])

        wl_all = np.array(wl_all)
        obs_all = np.array(obs_all)
        phase_all = np.array(phase_all)
        phase_all = np.deg2rad(phase_all)

        ds = dataset(wl, obs_all)
        ds.phase = phase_all

        return ds

    def get_stellarflux(self, **data):
        """ load stellar flux generated by PSG

        Parameters:
        ----------
        config : {dict}
            configuration settings
        par : {dict}
            stellar and planetary parameters
        Returns
        -------
        stellar : dataset
            stellar flux
        """
        wave_grid = data["observations"].wave
        wmin, wmax = wave_grid[0], wave_grid[-1]

        if not exists(self.file_flux) or not self.check_wavelength_range(
            self.file_flux, (wmin, wmax)
        ):
            self.prepare_config_file(data["parameters"])
            self.load_psg(None, wmin, wmax, star=True)

        file_flux = self.file_flux
        flux = pd.read_csv(file_flux)

        wl = flux["Wave/freq"].values
        flux = flux["Stellar"].values

        ds = dataset(wl, flux)
        return ds

    def get_tellurics(self, **data):
        """ load telluric transmission spectrum generated by PSG

        Parameters:
        ----------
        config : {dict}
            configuration settings
        par : {dict}
            stellar and planetary parameters
        Returns
        -------
        tellurics : dataset
            telluric transmission spectrum
        """
        tell_file = self.file_tell
        tell = pd.read_csv(tell_file)

        wl = tell["Wave/freq"].values
        tell = tell["Telluric"].values

        return wl, tell

    def check_wavelength_range(self, file_flux, wave):
        wmin, wmax = wave
        ds = pd.read_csv(file_flux)
        wave = ds["Wave/freq"].values
        return not (wave[0] > wmin or wave[-1] < wmax)

    def prepare_config_file(self, star, planet):
        if not exists(self.file_config):
            base_file = dirname(__file__)
            base_file = join(base_file, "psg_config.xml")
            os.makedirs(os.path.dirname(self.file_config), exist_ok=True)
            shutil.copyfile(base_file, self.file_config)

        star_name = star.name
        planet_name = planet.name

        # TODO figure out all the parameters we need to change to make it fit accurately
        object_name = f"{star_name}{planet_name}"
        object_diameter = planet.radius.to("km").value
        object_gravity = (planet.mass * G).to("m**3/s**2").value
        object_distance = planet.a.to("AU").value
        object_velocity = 0

        star_temp = star.teff.to("K").value
        star_radius = star.radius.to("R_sun").value

        psg_source = PSG(config_file=self.file_config)
        psg_config = psg_source.psg_config
        psg_config["OBJECT-NAME"] = object_name
        psg_config["OBJECT-DIAMETER"] = object_diameter
        psg_config["OBJECT-GRAVITY"] = object_gravity
        psg_config["OBJECT-STAR-DISTANCE"] = object_distance
        psg_config["OBJECT-STAR-VELOCITY"] = object_velocity
        psg_config["OBJECT-STAR-TEMPERATURE"] = star_temp
        psg_config["OBJECT-STAR-RADIUS"] = star_radius
        psg_config.save()

    def load_psg(
        self,
        phase,
        wl_low=5300,
        wl_high=6800,
        obs=False,
        star=False,
        planet=False,
        tell=False,
    ):
        """ load synthetic spectra from Planetary Spectrum Generator webservice

        PSG doesn't allow large wavelength ranges at high resolution, therefore split it into small parts that will be calculated
        Generated data is stored in the PSG input folder, defined in config
        https://psg.gsfc.nasa.gov/

        Parameters:
        ----------
        config : {dict}
            configuration settings
        phase : {float, np.ndarray}

        wl_low : {float}, optional
            lower end of the wavelength range to calculate in Angström (the default is 0.6)
        wl_high : {float}, optional
            upper end of the wavelength range to calculate in Ansgtröm (the default is 2.0)
        steps : {int}, optional
            number of parts that the wavelength range is split into, should be around 100 steps
            per 0.1 micron (the default is 140, which fits the default values for wl_low and wl_high)
        """
        psg_file = self.file_config
        psg_source = PSG(config_file=psg_file)

        if tell:
            # Get telluric
            tell_file = self.file_tell
            df = psg_source.get_data_in_range(wl_low, wl_high, wephm="T", type="tel")
            df.to_csv(tell_file, index=False)

        if planet:
            # Get planet
            df = psg_source.get_data_in_range(wl_low, wl_high, wephm="T", type="trn")
            df.to_csv(self.file_atm, index=False)

        if star:
            # Get stellar flux
            flx_file = self.file_flux
            df = psg_source.get_data_in_range(wl_low, wl_high, wephm="T")
            df.to_csv(flx_file, index=False)

        if obs:
            for i, p in enumerate(phase):
                # Get radiance
                obs_file = self.file_obs.replace("*", str(i))
                psg_source.change_config({"OBJECT-SEASON": p})
                df = psg_source.get_data_in_range(wl_low, wl_high, wephm="T")
                df.to_csv(obs_file, index=False)


class PsgPlanetSpectrum(Psg):
    def __init__(self, star, planet):
        super().__init__(star, planet)
        self.spectrum = None
        self.is_prepared = False

    def prepare(self, wave):
        self.spectrum = self.get_planet(wave, Time.now())
        self.is_prepared = True

    def get(self, wave, time):
        if not self.is_prepared:
            self.prepare(wave)

        synth = deepcopy(self.spectrum)
        synth.time = time

        return synth
