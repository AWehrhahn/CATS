"""
Load spectra from Planetary Spectrum Generator (PSG)
"""
import glob
from os.path import basename, exists, join, splitext

import numpy as np
import pandas as pd

from DataSources.PSG import PSG

from .data_interface import (data_observations, data_planet, data_stellarflux,
                             data_tellurics)
from .dataset import dataset


class psg(data_planet, data_observations, data_stellarflux, data_tellurics):

    def __init__(self, configuration):
        super().__init__(configuration)
        star = self.configuration["_star"]
        planet = self.configuration["_planet"]
        self.configuration["dir"] = self.configuration["dir"].format(star=star, planet=planet)

        # TODO change psg config, to reflect orbital parameters

    @property
    def file_atm(self):
        return join(self.configuration['dir'], self.configuration['file_atm'])

    @property
    def file_obs(self):
        return join(self.configuration['dir'], self.configuration['file_obs'])
    
    @property
    def file_phase(self):
        return join(self.configuration['dir'], self.configuration['file_phase'])

    @property
    def file_flux(self):
        return join(self.configuration['dir'], self.configuration['file_star'])

    @property
    def file_tell(self):
        return join(self.configuration["dir"], self.configuration['file_tell'])

    @property
    def file_config(self):
        return join(self.configuration['dir'], self.configuration['file_config'])

    def get_planet(self, **data):
        """ load planetary transmission spectrum

        Parameters:
        ----------
        Returns
        -------
        planet : dataset
            planetary transmission spectrum
        """

        planet = pd.read_csv(self.file_atm)
        #TODO remove wl offset
        wl = planet['Wave/freq'].values * 1000 + 5000
        planet = planet['Total'].values

        ds = dataset(wl, planet)
        return ds

    def get_observations(self, **data):
        """ load observations created by PSG

        Parameters:
        ----------
        Returns
        -------
        obs : dataset
            observations
        """

        """ load observations """
        obs_file = self.file_obs
        phase_file = self.file_phase
        phase = pd.read_table(
            phase_file, delim_whitespace=True, index_col='filename')

        # Find all suitable files
        files = glob.glob(obs_file)

        obs_all = []
        wl_all = []
        phase_all = []

        for f in files:
            obs = pd.read_csv(f)

            wl = obs['Wave/freq'].values
            obs = obs['Total'].values

            wl_all.append(wl)
            obs_all.append(obs)

            bn = basename(f)
            bn = splitext(bn)[0]

            phase_all.append(phase.loc[bn]['phase'])

        wl_all = np.array(wl_all)
        obs_all = np.array(obs_all)
        phase_all = np.array(phase_all)
        phase_all = np.deg2rad(phase_all)

        ds = dataset(wl, obs_all)
        ds.phase = phase_all

        return ds

    def get_stellarflux(self, **data):
        """ load stellar flux generated by PSG

        Parameters:
        ----------
        config : {dict}
            configuration settings
        par : {dict}
            stellar and planetary parameters
        Returns
        -------
        stellar : dataset
            stellar flux
        """
        file_flux = self.file_flux
        flux = pd.read_csv(file_flux)

        wl = flux['Wave/freq'].values
        flux = flux['Stellar'].values

        return wl, flux

    def get_tellurics(self, **data):
        """ load telluric transmission spectrum generated by PSG

        Parameters:
        ----------
        config : {dict}
            configuration settings
        par : {dict}
            stellar and planetary parameters
        Returns
        -------
        tellurics : dataset
            telluric transmission spectrum
        """
        tell_file = self.file_tell
        tell = pd.read_csv(tell_file)

        wl = tell['Wave/freq'].values
        tell = tell['Telluric'].values

        return wl, tell

    def load_psg(self, phase, wl_low=5300, wl_high=6800, steps=140, obs=True, star=True, planet=True, tell=True):
        """ load synthetic spectra from Planetary Spectrum Generator webservice

        PSG doesn't allow large wavelength ranges at high resolution, therefore split it into small parts that will be calculated
        Generated data is stored in the PSG input folder, defined in config
        https://psg.gsfc.nasa.gov/

        Parameters:
        ----------
        config : {dict}
            configuration settings
        phase : {float, np.ndarray}

        wl_low : {float}, optional
            lower end of the wavelength range to calculate in Angström (the default is 0.6)
        wl_high : {float}, optional
            upper end of the wavelength range to calculate in Ansgtröm (the default is 2.0)
        steps : {int}, optional
            number of parts that the wavelength range is split into, should be around 100 steps
            per 0.1 micron (the default is 140, which fits the default values for wl_low and wl_high)
        """
        psg_file = self.file_config
        psg_source = PSG(config_file=psg_file)

        if tell:
            # Get telluric
            tell_file = self.file_tell
            if not exists(tell_file):
                df = psg_source.get_data_in_range(
                    wl_low, wl_high, steps, wephm='T', type='tel')
                df.to_csv(tell_file, index=False)

        if planet:
            # Get planet
            atm_file = self.file_atm
            if not exists(atm_file):
                df = psg_source.get_data_in_range(
                    wl_low, wl_high, steps, wephm='T', type='trn')
                df.to_csv(atm_file, index=False)

        if star:
            # Get stellar flux
            flx_file = self.file_flux
            if not exists(flx_file):
                df = psg_source.get_data_in_range(wl_low, wl_high, steps, wephm='T')
                df.to_csv(flx_file, index=False)

        if obs:
            for i, p in enumerate(phase):
                # Get radiance
                obs_file = self.file_obs.replace('*', str(i))
                if not exists(obs_file):
                    psg_source.change_config({'OBJECT-SEASON': p})
                    df = psg_source.get_data_in_range(wl_low, wl_high, steps, wephm='T')
                    df.to_csv(obs_file, index=False)
